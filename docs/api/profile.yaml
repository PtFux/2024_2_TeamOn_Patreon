openapi: 3.0.3
info:
  title: PushART | API
  description: >-
    API для профиля и страницы автора.
  version: 1.0.5
paths:
  /profile:
    get:
      tags:
        - profile
      summary: Получение профиля пользователя
      description: >
        Возвращает данные профиля на основе JWT-токена, переданного в Cookie.
        
        <p>В качестве подписок возвращает массив идентификаторов авторов, которых поддерживает пользователь, на основе пользовательского идентификатора. По author_id необходимо затем получить author_username и author_avatar с помощью соотвествующих запросов.</p>
        
        <p><strong>Вызывается всегда при переходе в свой профиль вне зависимости от роли.</strong></p>
      security:
        - cookieAuth: []
      responses:
        '200':
          description: Успешное получение профиля
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Profile'
        '401':
          description: Неверный или отсутствующий JWT-токен
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Внутренняя ошибка сервера
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /profile/{userID}/avatar:
    get:
      tags:
        - profile
      summary: Получение аватарки пользователя
      description: >-
        Возвращает на основе идентификатора профиля его аватарку в формате `multipart/form-data`.
        Поддерживаемые форматы: JPG, JPEG.
      parameters:
      - in: path
        name: userID
        required: true
        schema:
          type: string
        description: Идентификатор профиля
      security:
        - cookieAuth: []
      responses:
        '200':
          description: Успешное получение аватарки
          content:
            multipart/form-data:
              schema:
                $ref: '#/components/schemas/Picture'
        '401':
          description: Неверный или отсутствующий JWT-токен
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'  
        '500':
          description: Внутренняя ошибка сервера
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /profile/{userID}/username:
    get:
      tags:
        - profile
      summary: Получение только имени пользователя
      description: >-
        **Используется только для получения имени чужого профиля.** Возвращает username пользователя на основе его идентификатора.
        <p><strong>Вызывается для отображения имени пользователя в комментарии, посте, подписке.</strong></p>
      parameters:
      - in: path
        name: userID
        required: true
        schema:
          type: string
        description: Идентификатор автора
      security:
        - cookieAuth: []
      responses:
        '200':
          description: Успешное получение данных
          content:
            application/json:
              schema:
                type: object
                properties:
                  author_username:
                    type: string
                    description: Имя автора
        '401':
          description: Неверный или отсутствующий JWT-токен
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'  
        '500':
          description: Внутренняя ошибка сервера
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /profile/update:
    post:
      tags:
        - profile
      summary: Изменение профиля пользователя
      description: >-
        **Доступно только владельцу страницы**.
        Позволяет обновить отдельные поля профиля. Требует JWT-токен в Cookie. Требует валидации полей.
      security:
        - cookieAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateProfile'
      responses:
        '200':
          description: Успешное обновление профиля
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Profile'
        '204':
          description: Нет содержимого
        '400':
          description: Ошибка валидации данных профиля
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Неверный или отсутствующий JWT-токен
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Внутренняя ошибка сервера
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /profile/update/avatar:
    post:
      tags:
        - profile
      summary: Изменение аватарки профиля
      description: >-
        **Доступно только владельцу страницы**.
        Позволяет пользователю изменить аватар с использованием `multipart/form-data`.
        Поддерживаемые форматы: JPG, JPEG.
        Требует JWT-токен в Cookie.
      security:
        - cookieAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Picture'
      responses:
        '200':
          description: Успешное обновление фото профиля
        '400':
          description: Ошибка валидации или неверный формат данных
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Неверный или отсутствующий JWT-токен
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Ошибка сервера
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /author/{authorID}:
    get:
      tags:
        - author
      summary: Получение данных об авторе
      description: >-
        **Для страницы автора.** Возвращает основную информацию об авторе на основе его идентификатора. 
        <p><strong>Вызывается и для своей странички, и для чужой.</strong></p>
      parameters:
      - in: path
        name: authorID
        required: true
        schema:
          type: string
        description: Идентификатор автора
      security:
        - cookieAuth: []
      responses:
        '200':
          description: Успешное получение данных
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/Author'
                  - $ref: '#/components/schemas/Profile'
        '401':
          description: Неверный или отсутствующий JWT-токен
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'  
        '500':
          description: Внутренняя ошибка сервера
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /author/{authorID}/background:
    get:
      tags:
        - author
      summary: Получение фона страницы автора
      description: >-
        Возвращает на основе идентификатора автора его фон страницы в формате `multipart/form-data`.
        Поддерживаемые форматы: JPG, JPEG.
        <p><strong>Вызывается и для своей странички, и для чужой.</strong></p>
      parameters:
      - in: path
        name: authorID
        required: true
        schema:
          type: string
        description: Идентификатор автора
      security:
        - cookieAuth: []
      responses:
        '200':
          description: Успешное получение фона страницы
          content:
            multipart/form-data:
              schema:
                $ref: '#/components/schemas/Picture'
        '401':
          description: Неверный или отсутствующий JWT-токен
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'  
        '500':
          description: Внутренняя ошибка сервера
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /author/{authorID}/payments:
    get:
      tags:
        - author
      summary: Получение суммы выплат автора
      description: >-
        Возвращает сумму выплат автору на основе его идентификатора. 
        **Сумму могут увидеть все**.
        <p><strong>Вызывается и для своей странички, и для чужой.</strong></p>
      parameters:
      - in: path
        name: authorID
        required: true
        schema:
          type: string
        description: Идентификатор автора
      security:
        - cookieAuth: []
      responses:
        '200':
          description: Успешное получение выплат
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Payment'
        '401':
          description: Неверный или отсутствующий JWT-токен
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Внутренняя ошибка сервера
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /author/{authorId}/posts:
      get:
        tags:
          - author
        summary: Получение ленты постов автора
        description: >-
          Возвращает ленту постов по authorId. Если authorId == me, то айди брать из куков
          Если нет, то парсить урл и вытаскивать authorId и уже даем данные относительно authorId.
          <p><strong>Вызывается и для своей странички, и для чужой.</strong></p>
        security:
          - cookieAuth: []
        parameters:
        - in: path
          name: authorId
          required: true
          schema:
            type: string
          description: Идентификатор автора, чью ленту постов нужно получить
        responses:
          '200':
            description: Успешное получение поста
            content:
              application/json:
                schema:
                  type: array
                  items:
                    $ref: '#/components/schemas/AuthorPosts'
          '404':
            description: Пост не найден
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Error'
          '500':
            description: Внутренняя ошибка сервера
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Error'
  /author/{authorId}/media:
    get:
      tags:
        - author
      summary: Получение медиа-контента поста на странице
      description: >-
        Возвращает загруженный медиа-контент на своей странице или автора.
        Если authorId == me, то айди брать из куков
        Если нет, то парсить урл и вытаскивать authorId и уже даем данные относительно authorId.
      security:
        - cookieAuth: []
      parameters:
      - in: path
        name: authorId
        required: true
        schema:
          type: string
        description: Идентификатор автора, чью ленту медиа контента к постам нужно получить
      responses:
        '200':
          description: Медиа-контент успешно получен
          content:
           multipart/form-data:
              schema:
               type: array
               items:
                  $ref: '#/components/schemas/MediaGetSuccessResponse'
        '404':
          description: Медиа-контент не найден
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Ошибка сервера
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /author/{authorID}/subscriptions:
    get:
      tags:
        - author
      summary: Получение подписок автора
      description: >-
        Возвращает массив идентификаторов авторов, которых поддерживает автор, на основе его идентификатора. По author_id необходимо затем получить author_username и author_avatar с помощью соотвествующих запросов.
        <p>**Подписки автора могут увидеть все**.
        <p>**Применять при получении только чужой странички**.
      security:
        - cookieAuth: []
      parameters:
      - in: path
        name: authorID
        required: true
        schema:
          type: string
        description: Идентификатор пользователя
      responses:
        '200':
          description: Список авторов
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Subscription'
        '401':
          description: Неверный или отсутствующий JWT-токен
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Внутренняя ошибка сервера
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /author/update/background:
    post:
      tags:
        - author
      summary: Изменение фона страницы автора
      description: >-
        **Доступно только владельцу страницы**.
        Позволяет автору изменить фон своей страницы с использованием `multipart/form-data`.
        Поддерживаемые форматы: JPG, JPEG.
        Требует JWT-токен в Cookie.
      security:
        - cookieAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Picture'
      responses:
        '200':
          description: Успешное обновление фона профиля
        '400':
          description: Ошибка валидации или неверный формат данных
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Неверный или отсутствующий JWT-токен
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Ошибка сервера
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
components:
  securitySchemes:
    cookieAuth:
      type: apiKey
      in: cookie
      name: JWT
  schemas:
    Profile:
      type: object
      required:
        - username
      description: Модель профиля пользователя
      properties:
        username:
          type: string
          description: Имя пользователя
        email:
          type: string
          description: Почта пользователя (если есть)
          nullable: true
        role:
          type: string
          description: Роль пользователя
        subscriptions:
          type: array
          description: Подписки пользователя
          items:
            type: object
            properties:
              authorId:
                type: string
                description: Идентификатор автора
    Author:
      type: object
      description: Модель страницы автора
      properties:
        author_username:
          type: string
          description: Имя автора
        info:
          type: string
          description: Информация об авторе (поле "О себе")
        followers:
          type: number
          description: Количество подписчиков автора
    UpdateProfile:
      type: object
      properties:
        username:
          type: string
          description: Имя пользователя
        email:
          type: string
          description: Почта пользователя
          format: email
          example: newemail@example.com
          nullable: true
        password:
          type: string
          description: Новый пароль пользователя
          nullable: true
    Payment:
      type: object
      required:
        - amount
      description: Модель выплат
      properties:
        amount:
          type: string
          description: Сумма выплат
    Subscription:
      description: Модель подписок
      type: object
      properties:
        subscriptions:  # Название массива
          type: array
          items:
            type: object  # Указываем, что элементы массива - это объекты
            properties:
              authorId:
                type: string
                description: Идентификатор автора
    Error:
      type: object
      properties:
        message:
          type: string
          description: Сообщение об ошибке
    Picture:
      type: object
      properties:
        file:
          type: string
          format: binary
          description: Загружаемый файл (JPG, JPEG)
      required:
        - file
    AuthorPosts:
      type: object
      properties:
        postId:
          type: string
          description: Идентификатор поста
        title:
          type: string
          description: Заголовок поста
        content:
          type: string
          description: Содержимое поста
        likes:
          type: integer
          description: Количество лайков поста
    MediaGetSuccessResponse:
      type: object
      properties:
        postId:
          type: string
        mediaContent: 
          type: object
          properties: 
            mediaId:
              type: string
            mediaType:
              type: string
              enum: [PDF, JPG, JPEG, MP3, MP4, jpg, jpeg]
              description: Формат файла
            description:
              type: string
              example: "Описание медиа-контента"
            file:
              type: string
              format: binary
              description: Загрузка медиа-файла